name: Publish Package

on:
  workflow_run:
    workflows: ['CI']
    types:
      - completed
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

      - name: Build
        run: npm run build

      - name: Determine release version
        id: get-version
        run: |
          # Get package name and current version from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Package name: $PACKAGE_NAME"
          echo "Current version in package.json: $CURRENT_VERSION"

          # Check if current version is already 1.0.0 or higher (stable release)
          if [[ "$CURRENT_VERSION" =~ ^[1-9][0-9]*\.[0-9]+\.[0-9]+$ ]]; then
            echo "Publishing stable release: $CURRENT_VERSION"
            echo "is_stable=true" >> $GITHUB_OUTPUT
            echo "next_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "Publishing beta release based on current version"
            # Get latest beta version
            LATEST_VERSION=$(npm view "${PACKAGE_NAME}@beta" version 2>/dev/null || echo "0.1.0-beta.0")
            if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
              LATEST_VERSION="0.1.0-beta.0"
            fi
            echo "Latest beta version: $LATEST_VERSION"

            # Extract the base version and beta number
            BASE_VERSION=$(echo $LATEST_VERSION | cut -d'-' -f1)
            BETA_NUM=$(echo $LATEST_VERSION | grep -o 'beta\.[0-9]*' | cut -d'.' -f2)
            NEXT_BETA=$((BETA_NUM + 1))
            NEXT_VERSION="${BASE_VERSION}-beta.${NEXT_BETA}"

            echo "is_stable=false" >> $GITHUB_OUTPUT
            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
          fi

          echo "Final version will be: $(cat $GITHUB_OUTPUT | grep next_version | cut -d'=' -f2)"
          echo "NPM tag will be: $(cat $GITHUB_OUTPUT | grep npm_tag | cut -d'=' -f2)"

      - name: Update package.json version
        run: |
          # Only update version if it's a beta release (stable releases use existing version)
          if [ "${{ steps.get-version.outputs.is_stable }}" = "false" ]; then
            npm version ${{ steps.get-version.outputs.next_version }} --no-git-tag-version
          fi

      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTOMATION_TOKEN }}" > .npmrc
          # Publish the package with appropriate tag (latest for stable, beta for beta)
          npm publish --access public --tag ${{ steps.get-version.outputs.npm_tag }}
          
          # For stable releases, also update the latest tag
          if [ "${{ steps.get-version.outputs.is_stable }}" = "true" ]; then
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            echo "Published stable release ${PACKAGE_NAME}@${PACKAGE_VERSION} with latest tag"
          else
            # For beta releases, ensure beta tag points to this version
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            npm dist-tag add ${PACKAGE_NAME}@${PACKAGE_VERSION} beta
            echo "Published beta release ${PACKAGE_NAME}@${PACKAGE_VERSION} with beta tag"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTOMATION_TOKEN }}
