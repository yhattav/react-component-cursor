---
description: 
globs: *.ts, *.tsx, *.js, *.jsx
alwaysApply: false
---
# TypeScript Standards

## Critical Rules
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces
- Use the "function" keyword for pure functions
- Use curly braces for all conditionals. Favor simplicity over cleverness
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- **NEVER use comments to explain code behavior, implementation details, or why something works.** Code must be self-explanatory through naming and structure. Comments indicate the code needs refactoring.

## Comment Elimination Rule
**If you find yourself writing ANY of these comment patterns, STOP and refactor the code instead:**

### ❌ FORBIDDEN Comment Patterns:
```typescript
// No dependencies - prevents re-subscription
// This fixes the performance issue
// Handle mouse movement
// Call immediately  
// Skip this subscriber if...
// Use RAF to batch notifications
// Apply throttling if specified
// Set up event listener when...
```

### ✅ REQUIRED Approach - Self-Documenting Code:
```typescript
// ❌ BAD: Comment explains behavior
const handleUpdate = useCallback((data) => {
  // ...
}, []); // No dependencies - prevents re-subscription

// ✅ GOOD: Name explains intention
const stableUpdateHandler = useCallback((data) => {
  // ...
}, []);
```

## Code Structure
- Structure files: exported component, subcomponents, helpers, static content, types

## Examples

<example>
```typescript
interface UserProps {
  isLoading: boolean;
  hasError: boolean;
}

function UserProfile({ isLoading, hasError }: UserProps) {
  if (isLoading) {
    return <LoadingSpinner />;
  }
  
  if (hasError) {
    return <ErrorMessage />;
  }
  
  return <UserDetails />;
}

export { UserProfile };
```
</example>

<example type="invalid">
```typescript
// Using enum instead of map
enum Status {
  LOADING = 'loading',
  ERROR = 'error'
}

// Using class instead of functional component
class UserProfile extends React.Component {
  render() {
    return <div>User</div>;
  }
}

// Missing curly braces
if (loading) return <div>Loading</div>;

// ❌ FORBIDDEN: Explanatory comments
const handler = useCallback(() => {
  // ...
}, []); // Empty array prevents re-renders

// ❌ FORBIDDEN: Implementation explanation
if (condition) {
  // This fixes the bug by...
  doSomething();
}
```
</example>
